
clear
% gathering all data to do group level summary with ROI and epoch
% specificity
addpath('R:\MSS\Johnson_Lab\dtf8829\GitHub\myFrequentUse\export_fig_repo')
rois = {'dlPFC', 'hip', 'phg', 'acc'}; 
datFolder  = "C:\Users\dtf8829\Documents\QuestConnect\SUMDAT";


subFiles = dir(datFolder); 
subFiles = subFiles([subFiles.isdir]==false); 

%create allDat struct
allDat = struct; 

for sub = 1:length(subFiles)
    sub
    subDat = load([subFiles(sub).folder '/' subFiles(sub).name]).subDat; 

    %get the necessary meta data to track the subject
    allDat(sub).site = subDat.site; 
    allDat(sub).subID = subDat.subID; 
    allDat(sub).age = subDat.age; 
    allDat(sub).sex = subDat.sex{1}; 
    allDat(sub).use = subDat.use; 
    allDat(sub).hits = subDat.hits;
    allDat(sub).misses = subDat.misses; 
    allDat(sub).retInfo = subDat.retInfo; 
    allDat(sub).elecPos = subDat.elecpos; 
    allDat(sub).roimni = subDat.roimni; 
    allDat(sub).roiNote = subDat.roiNote; 
    
    %check that it's through the pipeline
    if isfield(subDat, 'ISPCboot')
       
        %use the note based roi matrix as a default
        if sum(sum(subDat.roiNote))==0
            roiMat = subDat.roimni; 
        else
            roiMat = subDat.roiNote; 
        end
        
        allDat(sub).encepoch = subDat.encepoch; 
        allDat(sub).onepoch = subDat.onepoch; 
        allDat(sub).rtepoch = subDat.rtepoch; 

        %get all the timefrequency stuff
        for rr = 1:size(roiMat,2)
            fields = fieldnames(subDat.TFout); 
            for fi = 1:length(fields)
                cur = subDat.TFout.(fields{fi}); 
                cur = cur(:,:,subDat.chanorder); 
                cur = cur(:,:,roiMat(:,rr)==1); 
                if ~isempty(cur)
                allDat(sub).([fields{fi} '_' rois{rr}]) = mean(cur,3);
                end
            end
        end

        %get all the connectivity stuff
        for rr = 1:size(roiMat,2)
            for rr2 = 1:size(roiMat,2)
                if rr>=rr2
                fields = fieldnames(subDat.ISPCout); 
                for fi = 1:length(fields)
                    cur = subDat.ISPCout.(fields{fi});
                     % check for error with too many channels in one dimension
                    if size(cur,1) ~= size(cur,5)
%                         disp('weird error!')
                        if sum(cur(1,:,:,:,:), 'all') ==0
%                             disp('removing empty chan')
                            cur = cur(2:end,:,:,:,:); 
                        else
                            disp('could not fix')
                        end
                    end
                    cur = quickChanFillIn(cur);
                    cur = cur(subDat.chanorder,:, :,:,subDat.chanorder); 
                    cur = cur(roiMat(:,rr2)==1,:,:,:,roiMat(:,rr)==1); 
                    if ~isempty(cur)
                    allDat(sub).([fields{fi} '_' rois{rr} '_' rois{rr2}]) = squeeze(mean(cur,[1,5]));
                    end
                end
                end
            end
        end


    end


end

save("C:\Users\dtf8829\Documents\QuestConnect\allDat.mat", "allDat", "-v7.3")


%% split conditions for HPC based cluster testing

varNames = fieldnames(allDat);
metaNames = varNames(1:14); 
varNames = varNames(15:end);

for ii = 1:length(varNames)
    cndDat = struct; 
    %put all the meta data into the condition file
    for mi = 1:length(metaNames)
        cndDat.(metaNames{mi}) = allDat.(metaNames{mi});
    end
    cndDat.targVar = varNames{ii}; 
    [pairi, pairName] = getPair(varNames{ii}, varNames, ii);
    cndDat.varIdx = ii; 
    cndDat.pairIdx = pairi; 
    cndDat.pairVar = pairName; 
    [datForPerm, condCode] = getPairedDat(varNames, allDat, ii, pairi); 
    


end





%% permutation based cluster testing

groupStats = struct; 

varNames = fieldnames(allDat);
varNames = varNames(15:end);

for ii = 1:length(varNames)
    curVar = varNames{ii}; 
    %find it's pair
    if contains(curVar, 'sub')
        %subsequent memory
        if contains(curVar, 'Miss')
            splitVar = split(curVar, 'Miss');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, splitVar{1}) & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        elseif contains(curVar, 'Hit')
            splitVar = split(curVar, 'Hit');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, splitVar{1}) & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        end
    elseif contains(curVar, 'on')
        %onset locked! 
        if contains(curVar, 'miss')
            splitVar = split(curVar, 'miss');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, 'hit') & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        elseif contains(curVar, 'hit')
            splitVar = split(curVar, 'hit');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, 'miss') & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        else
            pairi = 999; %currently skipping CR and FA 
        end
    else
        %RT locked! 
        if contains(curVar, 'miss')
            splitVar = split(curVar, 'miss');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, 'hit') & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        elseif contains(curVar, 'hit')
            splitVar = split(curVar, 'hit');
            temp = varNames; 
            temp{ii} = 'not this one'; 
            idx = find(cellfun(@(x) contains(x, 'miss') & contains(x, splitVar{2}), temp )); 
            [~, idxi] = min(abs(idx-ii)); 
            pairi = idx(idxi);

        else
            pairi = 999; %currently skipping CR and FA 
        end

    end

    if ii > pairi %don't double work! 
        %need to grab all subject data where the subject has the target
        %variable available
        curHave = arrayfun(@(x) ~isempty(allDat(x).(varNames{ii})),  1:length(allDat));
        pairHave = arrayfun(@(x) ~isempty(allDat(x).(varNames{pairi})),  1:length(allDat));
        
       
        condCode = [ones(sum(curHave),1); zeros(sum(pairHave),1)];
        
        curidx = find(curHave); 
        pairidx = find(pairHave); 
        test = nan; 
        ti = 1; %test index to find the first non nan set to initialize with
        while isnan(test)
            datForPerm = allDat(curidx(ti)).(varNames{ii}); 
            test = datForPerm(1); 
            if isnan(test)
                condCode(ti) = 999; 
            end
            ti = ti+1; 
        end
        dimVal = length(size(datForPerm)); 
        %loop forward grabbing condition 1 data 
        for curi = ti:length(curidx)
            temp = allDat(curidx(curi)).(varNames{ii});

            if isnan(temp(1,1))
                
                condCode(curi) = 999;
            else
                datForPerm = cat(dimVal+1, datForPerm, temp);
            end
        end
        for pri = 1:length(pairidx)
            temp = allDat(pairidx(pri)).(varNames{pairi});
            if isnan(temp(1,1))
                condCode(curi+pri) = 999; 
            else
                datForPerm = cat(dimVal+1, datForPerm, temp);
            end
        end

        condCode(condCode==999) = []; 
        


        %if the data were 2 dimensional 
        if dimVal==2

          tObs =   reshape(cell2mat(arrayfun(@(x) ...
                        arrayfun(@(y) ...
                            getTstat(datForPerm(x,y,condCode==1), datForPerm(x,y,condCode==0)), ...
                        1:size(temp,2)),...
                    1:size(temp,1), 'uniformoutput', false)), flip(size(temp)));


          perms = zeros([size(tObs),1000]); 

          for p = 1:1000
                curShuf = randsample(condCode, length(condCode), false); 
                perms(:,:,p) =   reshape(cell2mat(arrayfun(@(x) ...
                            arrayfun(@(y) ...
                                getTstat(datForPerm(x,y,curShuf==1), datForPerm(x,y,curShuf==0)), ...
                            1:size(temp,2)),...
                        1:size(temp,1), 'uniformoutput', false)), flip(size(temp)));


          end

          [h, p, clusterinfo] = cluster_test(tObs, perms); 


        else
            disp('need to program for larger sets')

        end
       

      
    end
end


%% look here for some stats code help: 
%https://www.frontiersin.org/articles/10.3389/fnsys.2015.00123/full#h3



measure = 4; 

%between area encoding connectivity: 
connectionPlot(allDat, "subHit_acc_hip", "subMiss_acc_hip", measure, allDat(1).encepoch)

connectionPlot(allDat, "subHit_phg_dlPFC", "subMiss_phg_dlPFC", measure, allDat(1).encepoch)

connectionPlot(allDat, "subHit_acc_dlPFC", "subMiss_acc_dlPFC", measure, allDat(1).encepoch)

connectionPlot(allDat, "subHit_phg_hip", "subMiss_phg_hip", measure, allDat(1).encepoch)

connectionPlot(allDat, "subHit_acc_phg", "subMiss_acc_phg", measure, allDat(1).encepoch)

connectionPlot(allDat, "subHit_hip_dlPFC", "subMiss_hip_dlPFC", measure, allDat(1).encepoch)

%within area encoding connectivity: 
connectionPlot(allDat, "subHit_acc_acc", "subMiss_acc_acc", 2, allDat(1).encepoch)

connectionPlot(allDat, "subHit_phg_phg", "subMiss_phg_phg", 2, allDat(1).encepoch)

connectionPlot(allDat, "subHit_hip_hip", "subMiss_hip_hip", 2, allDat(1).encepoch)

connectionPlot(allDat, "subHit_dlPFC_dlPFC", "subMiss_dlPFC_dlPFC", 2, allDat(1).encepoch)





%between area response locked connectivity: 
connectionPlot(allDat, "hit_rt_acc_hip", "miss_rt_acc_hip", measure, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_phg_dlPFC", "miss_rt_phg_dlPFC", measure, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_acc_dlPFC", "miss_rt_acc_dlPFC", measure, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_phg_hip", "miss_rt_phg_hip", measure, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_acc_phg", "miss_rt_acc_phg", measure, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_hip_dlPFC", "miss_rt_hip_dlPFC", measure, allDat(1).rtepoch)

%within area response locked connectivity: 
connectionPlot(allDat, "hit_rt_acc_acc", "miss_rt_acc_acc", 2, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_phg_phg", "miss_rt_phg_phg", 2, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_hip_hip", "miss_rt_hip_hip", 2, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_dlPFC_dlPFC", "miss_rt_dlPFC_dlPFC", 2, allDat(1).rtepoch)


%between area retrieval image locked connectivity: 
connectionPlot(allDat, "hit_on_acc_hip", "miss_on_acc_hip", measure, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_phg_dlPFC", "miss_on_phg_dlPFC", measure, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_acc_dlPFC", "miss_on_acc_dlPFC", measure, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_phg_hip", "miss_on_phg_hip", measure, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_acc_phg", "miss_on_acc_phg", measure, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_hip_dlPFC", "miss_on_hip_dlPFC", measure, allDat(1).onepoch)

%within area retrieval image locked connectivity: 
connectionPlot(allDat, "hit_on_acc_acc", "miss_on_acc_acc", 2, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_phg_phg", "miss_on_phg_phg", 2, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_hip_hip", "miss_on_hip_hip", 2, allDat(1).onepoch)

connectionPlot(allDat, "hit_on_dlPFC_dlPFC", "miss_on_dlPFC_dlPFC", 2, allDat(1).onepoch)


















connectionPlot(allDat, "subHit_phg_dlPFC", "subMiss_phg_dlPFC", 2, allDat(1).encepoch)

connectionPlot(allDat, "hit_rt_acc_hip", "cr_rt_acc_hip", 2, allDat(1).rtepoch)

connectionPlot(allDat, "hit_rt_phg_dlPFC", "cr_rt_phg_dlPFC", 2, allDat(1).rtepoch)


% 
% 
% figure
% subplot 311
% targField = "subHit_acc_hip"; 
% epoch = allDat(1).encepoch;
% 
% test = find(cellfun(@(x) ~isempty(x), {allDat.(targField)}));
% 
% temp = allDat(test); 
% 
% temp = {temp.(targField)}; 
% out = temp{1}; 
% dimVal = length(size(out)); 
% for ii = 2:length(temp)
%     out = cat(dimVal+1, out, temp{ii} );
% end
% 
% out = mean(out, dimVal+1); 
% 
% imagesc(out(:,:,2)')
% set(gca, 'YDir', 'normal')
% caxis([0,.05])
% colorbar
% xticks([1.5:2:length(epoch)])
% xticklabels(epoch([2:2:end]))
% yticks([20:20:100])
% yticklabels(round(frex([20:20:100])))
% 
% 
% subplot 312
% targField = "subMiss_acc_hip"; 
% 
% 
% test = find(cellfun(@(x) ~isempty(x), {allDat.(targField)}));
% 
% temp = allDat(test); 
% 
% temp = {temp.(targField)}; 
% out = temp{1}; 
% dimVal = length(size(out)); 
% for ii = 2:length(temp)
%     out = cat(dimVal+1, out, temp{ii} );
% end
% 
% out = mean(out, dimVal+1); 
% 
% imagesc(out(:,:,2)')
% set(gca, 'YDir', 'normal')
% caxis([0,.05])
% colorbar
% xticks([1.5:2:length(epoch)])
% xticklabels(epoch([2:2:end]))
% yticks([20:20:100])
% yticklabels(round(frex([20:20:100])))








